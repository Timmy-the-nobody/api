{
	"name": "Database",
	"description": "The Database entity provides programmers a way to access SQL databases easily through scripting.",
	"authority": "server",
	"constructors": [
		{
			"name": "Default Constructor",
			"parameters": [
				{
					"type": "DatabaseEngine",
					"name": "database_engine",
					"description": "Database Engine"
				},
				{
					"type": "string",
					"name": "connection_string",
					"description": "<a href='#connection-string'>Connection String</a> used to create and connect to the database"
				},
				{
					"type": "integer",
					"name": "pool_size",
					"default": "10",
					"description": "Size of the connection pool when calling several queries simultaneously"
				}
			]
		}
	],
	"functions": [
		{
			"name": "Close",
			"authority": "server",
			"description": "Closes the Database"
		},
		{
			"name": "ExecuteAsync",
			"authority": "server",
			"description": "Execute a query asynchronously",
			"parameters": [
				{
					"type": "string",
					"name": "query",
					"description": "Query to execute"
				},
				{
					"type": "function",
					"name": "callback",
					"default": "nil",
					"description": "Callback",
					"function_parameters": [
						{
							"name": "rows_affected",
							"type": "integer",
							"description": "Amount of rows affected"
						},
						{
							"name": "error",
							"type": "string?",
							"description": "Error message, if got error"
						}
					]
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Sequence of parameters to escape into the Query"
				}
			]
		},
		{
			"name": "Execute",
			"authority": "server",
			"description": "Execute a query synchronously",
			"parameters": [
				{
					"type": "string",
					"name": "query",
					"description": "Query to execute"
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Sequence of parameters to escape into the Query"
				}
			],
			"return": [
				{
					"type": "integer",
					"description": "affected rows"
				},
				{
					"type": "string",
					"description": "error (if any)"
				}
			],
			"examples": [
				{
					"title": "Inserts into database (SQLite)",
					"content": "local affected_rows = my_database:Execute(\"INSERT INTO MyTable VALUES (:0, ':1')\", 123, \"MyValue\")"
				}
			]
		},
		{
			"name": "SelectAsync",
			"authority": "server",
			"description": "Execute a select query asynchronously",
			"parameters": [
				{
					"type": "string",
					"name": "query",
					"description": "Query to execute"
				},
				{
					"type": "function",
					"name": "callback",
					"default": "nil",
					"description": "Callback",
					"function_parameters": [
						{
							"name": "rows",
							"type": "table[]",
							"description": "All rows returned by the query"
						},
						{
							"name": "error",
							"type": "string?",
							"description": "Error message, if got error"
						}
					]
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Sequence of parameters to escape into the Query"
				}
			],
			"examples": [
				{
					"title": "Selects from a table asynchronously (SQLite)",
					"content": "my_database:SelectAsync(\"SELECT * FROM MyTable WHERE name = :0 AND title = :1\", function(rows)\n\tConsole.log(NanosTable.Dump(rows))\nend, \"Val\", \"AnotherVal\")"
				}
			]
		},
		{
			"name": "Select",
			"authority": "server",
			"description": "Selects a query synchronously",
			"parameters": [
				{
					"type": "string",
					"name": "query",
					"description": "Query to execute"
				},
				{
					"type": "any",
					"name": "parameters...",
					"default": "nil",
					"description": "Sequence of parameters to escape into the Query"
				}
			],
			"return": [
				{
					"type": "table[]",
					"description": "rows fetched"
				},
				{
					"type": "string",
					"description": "error (if any)"
				}
			],
			"examples": [
				{
					"title": "Selects from a table (SQLite)",
					"content": "local rows = my_database:Select(\"SELECT * FROM MyTable WHERE name = :0 AND title = :1\", \"Val\", \"AnotherVal\")"
				}
			]
		}
	]
}